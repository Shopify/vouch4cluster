package voucher

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func makeTestVulns() []Vulnerability {
	return []Vulnerability{
		{
			Name:     "Bad One",
			Severity: HighSeverity,
		},
		{
			Name:     "Mediocre One",
			Severity: MediumSeverity,
		},
		{
			Name:     "The Rare One",
			Severity: CriticalSeverity,
		},
	}

}

func TestVulnerabilityError(t *testing.T) {
	vulns := makeTestVulns()

	expected := "vulnernable to 3 vulnerabilities: Bad One (high), Mediocre One (medium), The Rare One (critical)"

	err := NewVulnerabilityError(vulns)

	output := err.Error()
	assert.Equal(t, expected, output)
}

func TestShouldIncludeVulnerability(t *testing.T) {
	vulns := makeTestVulns()

	tests := []struct {
		Baseline Severity
		Compare  Vulnerability
		Included bool
	}{
		{
			Baseline: HighSeverity,
			Compare:  vulns[0],
			Included: true,
		},
		{
			Baseline: LowSeverity,
			Compare:  vulns[0],
			Included: true,
		},
		{
			Baseline: CriticalSeverity,
			Compare:  vulns[0],
			Included: false,
		},
		{
			Baseline: CriticalSeverity,
			Compare:  vulns[1],
			Included: false,
		},
		{
			Baseline: CriticalSeverity,
			Compare:  vulns[2],
			Included: true,
		},
	}

	for _, test := range tests {
		if test.Included != ShouldIncludeVulnerability(test.Compare, test.Baseline) {
			expected := "be"
			if !test.Included {
				expected = "not be"
			}
			t.Errorf("Test vulnerability is %s, should %s included when baseline is %s", vulns[0].Severity, expected, test.Baseline)
		}
	}
}
